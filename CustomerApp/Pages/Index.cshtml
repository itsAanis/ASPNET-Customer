@page
@model IndexModel
@{
    ViewData["Title"] = "Customer page";
}
<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
</head>

<body>
    <div class="container mt-4">
        <h1 class="mb-4">@ViewData["Title"]</h1>

        <!-- Placeholder for Customer List and Form -->
        <div id="customerSection"></div>
    </div>


    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            renderCustomerSection();
            getAllCustomers(); // Fetch customers on page load
        });

        const apiBaseUrl = 'https://localhost:7208/customers';

        // Render the customer section
        function renderCustomerSection() {
            const customerSection = document.getElementById('customerSection');
            customerSection.innerHTML = `
                        <div class="mb-4">
                            <h2>Customers & Their Team</h2>
                            <ul id="customerList" class="list-group"></ul>
                        </div>
                        <div class="mb-4">
                            <h2>Add New Customer</h2>
                            <form id="addCustomerForm" class="form-group">
                                <div class="mb-3">
                                    <label for="name" class="form-label">Name:</label>
                                    <input type="text" id="name" class="form-control" required />
                                </div>
                                <div class="mb-3">
                                    <label for="team" class="form-label">Football Team:</label>
                                    <input type="text" id="team" class="form-control" required />
                                </div>
                                <button type="submit" class="btn btn-success">Add Customer</button>
                            </form>
                        </div>
                    `;

            // Attach form submit event listener
            document.getElementById('addCustomerForm').addEventListener('submit', addCustomer);
        }

        // Fetch all customers
        async function getAllCustomers() {
            try {
                const response = await fetch(apiBaseUrl);
                if (!response.ok) {
                    throw new Error(`An error occurred: ${response.statusText}`);
                }
                const customers = await response.json();
                displayCustomers(customers);
            } catch (error) {
                console.error(error);
                alert('Failed to fetch customers.');
            }
        }

        // Display customers in the list
        function displayCustomers(customers) {
            const customerList = document.getElementById('customerList');
            customerList.innerHTML = '';

            customers.forEach((customer) => {
                const li = document.createElement('li');
                li.className = 'list-group-item d-flex justify-content-between align-items-center';
                li.textContent = `${customer.name} - ${customer.team}`;

                // Create update and delete buttons
                const buttonGroup = document.createElement('div');

                const updateButton = createButton('Update', 'btn-warning', () => showUpdateForm(customer));
                const deleteButton = createButton('Delete', 'btn-danger', () => deleteCustomer(customer.id));

                buttonGroup.appendChild(updateButton);
                buttonGroup.appendChild(deleteButton);
                li.appendChild(buttonGroup);
                customerList.appendChild(li);
            });
        }

        
        function createButton(text, className, onClick) {
            const button = document.createElement('button');
            button.className = `btn ${className} btn-sm me-2`;
            button.textContent = text;
            button.onclick = onClick;
            return button;
        }

        // Add a new customer
        async function addCustomer(e) {
            e.preventDefault();
            const name = document.getElementById('name').value;
            const team = document.getElementById('team').value;

            try {
                const response = await fetch(apiBaseUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ name, team }),
                });
                if (response.ok) {
                    alert('Customer added.');
                    getAllCustomers(); 
                    e.target.reset();
                } else {
                    throw new Error('Failed to add customer.');
                }
            } catch (error) {
                console.error(error);
                alert(error.message);
            }
        }

        // Delete a customer
        async function deleteCustomer(id) {
            if (!confirm('Do you really want to delete this customer?')) {
                return;
            }

            try {
                const response = await fetch(`${apiBaseUrl}/${id}`, {
                    method: 'DELETE',
                });
                if (response.ok) {
                    alert('Customer deleted.');
                    getAllCustomers(); 
                } else {
                    throw new Error('Failed to delete customer.');
                }
            } catch (error) {
                console.error(error);
                alert(error.message);
            }
        }

        //  update form
        function showUpdateForm(customer) {
            const newName = prompt('Update name:', customer.name);
            const newTeam = prompt('Update team:', customer.team);

            if (newName !== null && newTeam !== null) {
                updateCustomer(customer.id, newName, newTeam);
            }
        }

        // Update a customer
        async function updateCustomer(id, name, team) {
            try {
                const response = await fetch(`${apiBaseUrl}/${id}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ id, name, team }),
                });
                if (response.ok) {
                    alert('Customer updated.');
                    getAllCustomers(); 
                } else {
                    throw new Error('Failed to update customer.');
                }
            } catch (error) {
                console.error(error);
                alert(error.message);
            }
        }
    </script>

</body>

